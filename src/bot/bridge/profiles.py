from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timezone
import random
from typing import Any, Dict, List
from urllib.parse import quote_plus

from tinydb import Query, TinyDB

DICEBEAR_BASE_URL = "https://api.dicebear.com/9.x/bottts-neutral/svg?scale=80"
DICTIONARY_ID = "dictionary"


DEFAULT_ADJECTIVES: List[str] = ['鮮やかな',
 '柔らかな',
 '静かな',
 '鋭い',
 '温かな',
 '涼しい',
 '眩しい',
 '穏やかな',
 '爽やかな',
 '力強い',
 '細やかな',
 '優しい',
 '落ち着いた',
 'にぎやかな',
 '清らかな',
 '勇ましい',
 '温厚な',
 '明るい',
 '暗い',
 '瑞々しい',
 '美しい',
 '誠実な',
 '鮮烈な',
 '荘厳な',
 '朗らかな',
 '豊かな',
 '渋い',
 '粋な',
 '快い',
 '鋼の',
 '柔軟な',
 '晴れやかな',
 '風雅な',
 '真新しい',
 '深い',
 '軽やかな',
 '密やかな',
 '甘い',
 '苦い',
 '淡い',
 '鮮明な',
 '軽快な',
 '純粋な',
 '清廉な',
 '端正な',
 '端麗な',
 '温順な',
 'おとなしい',
 '豪快な',
 '繊細な',
 '壮大な',
 '俊敏な',
 '勇敢な',
 '静謐な',
 '妖しい',
 '神秘的な',
 '幻想的な',
 '伝統的な',
 '現代的な',
 '機敏な',
 '大らかな',
 '雄大な',
 '粘り強い',
 '緻密な',
 '豊潤な',
 '素朴な',
 '誇らしい',
 '軽妙な',
 '上品な',
 '下品な',
 '艶やかな',
 '悩ましい',
 '禍々しい',
 '健やかな',
 '静粛な',
 '活発な',
 '俊秀な',
 '柔和な',
 '晴朗な',
 '斬新な',
 '気高い',
 '清楚な',
 '雅やかな',
 '快活な',
 '静寂な',
 '堅実な',
 '高潔な',
 '慎ましい',
 '麗しい',
 '頑丈な',
 '華やかな',
 '快適な',
 'しなやかな',
 '慈悲深い',
 '豪奢な',
 '晴らしい',
 '陽気な',
 '陰気な',
 '壮麗な',
 '優雅な',
 '円熟した',
 '鋭敏な',
 '俊才の',
 '直感的な',
 '精巧な',
 '質素な',
 '快調な',
 '真摯な',
 '柔剛な',
 '静穏な',
 '陽だまりの',
 '星明かりの',
 '月光の',
 '夕暮れの',
 '夜明けの',
 '雪解けの',
 '潮騒の',
 '風そよぐ',
 '春霞の',
 '夏空の']

DEFAULT_NOUNS: List[str] = ['狐',
 '猫',
 '犬',
 '鷹',
 '月',
 '星',
 '風',
 '雨',
 '霧',
 '霞',
 '雪',
 '氷',
 '森',
 '林',
 '花',
 '桜',
 '梅',
 '椿',
 '楓',
 '竹',
 '松',
 '海',
 '波',
 '潮',
 '灯',
 '火',
 '焔',
 '雲',
 '雷',
 '虹',
 '光',
 '影',
 '夢',
 '音',
 '歌',
 '詩',
 '琴',
 '笛',
 '鼓',
 '鶴',
 '亀',
 '龍',
 '鳳凰',
 '燕',
 '梟',
 '狼',
 '鹿',
 '熊',
 '兎',
 '蝶',
 '蜻蛉',
 '蜂',
 '鈴',
 '鐘',
 '鏡',
 '剣',
 '盾',
 '翼',
 '羽',
 '帆',
 '船',
 '灯台',
 '道',
 '橋',
 '泉',
 '湖',
 '河',
 '滝',
 '渦',
 '砂',
 '石',
 '岩',
 '峠',
 '山',
 '丘',
 '谷',
 '渓',
 '空',
 '風車',
 '灯籠',
 '庭',
 '畑',
 '果樹',
 '葡萄',
 '林檎',
 '蜜柑',
 '紅茶',
 '珈琲',
 '硝子',
 '陶器',
 '紙',
 '筆',
 '墨',
 '巻物',
 '書',
 '羅針',
 '地図',
 '時計',
 '歯車',
 '機械',
 '蒸気',
 '翼竜',
 '星座',
 '銀河',
 '惑星',
 '衛星',
 '彗星',
 '流星',
 '灯火',
 '砂時計',
 '宝石',
 '翡翠',
 '瑠璃',
 '琥珀',
 '真珠',
 '珊瑚',
 '貝殻',
 '潮騒',
 '波紋',
 '潮流',
 '灯影',
 '行灯',
 '風鈴',
 '紙魚',
 '灯蛾',
 '氷柱',
 '白銀',
 '黄金',
 '白夜',
 '極光',
 '南風',
 '北風',
 '東雲',
 '夕凪',
 '朝霧',
 '宵闇',
 '銀砂',
 '紅葉',
 '露',
 '露草',
 '朝顔',
 '百合',
 '牡丹',
 '睡蓮',
 '蓮',
 '苔',
 '茸',
 '木霊',
 '精霊',
 '妖精',
 '妖火',
 '幽霊',
 '幻',
 '影法師',
 '旅人',
 '書士',
 '錬金術師',
 '時計師',
 '船乗り',
 '吟遊詩人',
 '画家',
 '彫刻家',
 '工匠',
 '司書',
 '門番',
 '宿主',
 '旅籠',
 '灯守',
 '星読み',
 '風見',
 '茶匠',
 '菓子職人',
 '調香師',
 '薬草師',
 '庭師',
 '鍛冶師',
 '学士',
 '研究者',
 '観測者',
 '探検家',
 '冒険者',
 '案内人',
 '守護者',
 '見張り',
 '旅路',
 '航路',
 '足跡',
 '足音',
 '日記',
 '手紙',
 '伝書',
 '信号',
 '灯明',
 '霧笛',
 '潮見',
 '観測台',
 '塔',
 '城',
 '砦',
 '門']


@dataclass(slots=True, frozen=True)
class BridgeProfile:
    seed: str
    display_name: str
    avatar_url: str


class BridgeProfileStore:
    """Manage adjective/noun dictionaries and provide random display profiles."""

    def __init__(self, db: TinyDB, table_name: str = "bridge_profiles") -> None:
        self._db = db
        self._table = db.table(table_name)
        self._query = Query()
        self._ensure_seed_data()

    def _ensure_seed_data(self) -> None:
        if self._table.contains(self._query.id == DICTIONARY_ID):
            return

        record = {
            "id": DICTIONARY_ID,
            "adjectives": DEFAULT_ADJECTIVES,
            "nouns": DEFAULT_NOUNS,
            "updated_at": datetime.now(timezone.utc).isoformat(),
        }
        self._table.insert(record)
        print("Bridge profile dictionary seeded with default adjectives and nouns.")

    def _load_dictionary(self) -> Dict[str, Any]:
        record = self._table.get(self._query.id == DICTIONARY_ID)
        if record is None:
            raise RuntimeError("Bridge profile dictionary is not initialized.")
        adjectives = record.get("adjectives") or []
        nouns = record.get("nouns") or []
        if not adjectives or not nouns:
            raise RuntimeError("Bridge profile dictionary is empty.")
        return {"adjectives": adjectives, "nouns": nouns}

    def get_profile(self, *, seed: str) -> BridgeProfile:
        dictionary = self._load_dictionary()
        rng = random.Random(seed)

        adjectives: List[str] = dictionary["adjectives"]
        nouns: List[str] = dictionary["nouns"]

        adjective = rng.choice(adjectives)
        noun = rng.choice(nouns)
        display_name = f"{adjective}{noun}"
        avatar_seed = f"{seed}-{adjective}-{noun}"
        avatar_url = f"{DICEBEAR_BASE_URL}&seed={quote_plus(avatar_seed)}"

        return BridgeProfile(
            seed=avatar_seed,
            display_name=display_name,
            avatar_url=avatar_url,
        )
